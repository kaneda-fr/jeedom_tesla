De loin un des dossiers le plus important de votre plugin, il peut comporter 4 sous dossiers. 

Note : tous le long de cette partie l'id de votre plugin sera referencé par : plugin_id

===== PHP

Contient les fichiers PHP annexe, j'ai pris l'habitude de mettre par exemple un fichier d'inclusion si, bien sur, vous avez plusieurs fichier de class ou des 3rparty à inclure

===== Template

Qui peut contenir 2 sous-dossier, dashboard et mobile, c'est un dossier que Jeedom scan automatique à la recherche de widget, donc si vous utilisez des widgets specifiques c'est ici qu'il faut mettre leur fichier html

===== i18n

C'est ici que votre traduction doit aller sous forme de fichier json (le mieux et de regarde par exemple le plugin link:https://github.com/jeedom/plugin-zwave[zwave] pour voir la forme du fichier)

===== ajax

Ce dossier est pour tout vos fichier ajax, voici un squelette de fichier ajax : 

----

<?php

/* This file is part of Jeedom.
 *
 * Jeedom is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Jeedom is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Jeedom. If not, see <http://www.gnu.org/licenses/>.
 */

try {
    require_once dirname(__FILE__) . '/../../../../core/php/core.inc.php';
    include_file('core', 'authentification', 'php');

    if (!isConnect('admin')) {
        throw new Exception(__('401 - Accès non autorisé', __FILE__));
    }

    if (init('action') == 'votre action') {
       
        ajax::success($result);
    }

    throw new Exception(__('Aucune methode correspondante à : ', __FILE__) . init('action'));
    /*     * *********Catch exeption*************** */
} catch (Exception $e) {
    ajax::error(displayExeption($e), $e->getCode());
}
?>

----


==== class

Dossier très important c'est le moteur de votre plugin, c'est la que vient les 2 class obligatoire de votre plugin : 

- plugin_id
- plugin_idCmd

La premiere heritant devant hériter de la class eqLogic et la deuxieme de cmd. Voici un template : 

----
<?php

/* This file is part of Jeedom.
 *
 * Jeedom is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Jeedom is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Jeedom. If not, see <http://www.gnu.org/licenses/>.
 */

/* * ***************************Includes********************************* */
require_once dirname(__FILE__) . '/../../../../core/php/core.inc.php';

class plugin_id extends eqLogic {

    /*     * *************************Attributs****************************** */


    /*     * ***********************Methode static*************************** */


    /*     * *********************Methode d'instance************************* */

    
    /*     * **********************Getteur Setteur*************************** */

}

class plugin_idCmd extends cmd {

    /*     * *************************Attributs****************************** */


    /*     * ***********************Methode static*************************** */


    /*     * *********************Methode d'instance************************* */

    
    /*     * **********************Getteur Setteur*************************** */

}

?>
----

Pour la definition des class jeedom, je vous invite à consulter ce link:http://dev.jeedom.fr/[site]

La seule methode obligatoire et la methode d'instance sur la class cmd execute, voici un exemple avec le plugin S.A.R.A.H : 

----

 public function execute($_options = array()) {
        if (!isset($_options['title']) && !isset($_options['message'])) {
            throw new Exception(__("Le titre ou le message ne peuvent être tous les deux vide", __FILE__));
        }
        $eqLogic = $this->getEqLogic();
        $message = '';
        if (isset($_options['title'])) {
            $message = $_options['title'] . '. ';
        }
        $message .= $_options['message'];
        $http = new com_http($eqLogic->getConfiguration('addrSrvTts') . '/?tts=' . urlencode($message));
        return $http->exec();
    }

----

Exemple assez simple mais complet, le principe est le suivant, si la commande est une action ou une info (mais pas en evenement seulement et que son cache est dépassé) alors jeedom appels cette méthode.

Dans notre exemple ici c'est une commande pour faire parler S.A.R.A.H, ou le plugin recupère les paramètres dans $_options (attention c'est un tableau et ses attribut change en fonction du sous-type de la commande : color pour un sous-type color, slider pour un sous-type slider, title et message pour un sous-type message et vide pour un sous-type other).

Voila pour la partie obligatoire, voila maintenant ce qui peut etre utilisé à coté (avec exemple) : 

.toHtml($_version = 'dashboard')

Fonction utilisable dans la commande ou dans l'équipement, en fonction des besoin, voici un exemple pour l'équipement

----

   public function toHtml($_version = 'dashboard') {
        if ($this->getIsEnable() != 1) {
            return '';
        }
        $_version = jeedom::versionAlias($_version);
        $mc = cache::byKey('weatherWidget' . $_version . $this->getId());
        if ($mc->getValue() != '') {
            return $mc->getValue();
        }
        $html_forecast = '';

        if ($_version != 'mobile' || $this->getConfiguration('fullMobileDisplay', 0) == 1) {
            $forcast_template = getTemplate('core', $_version, 'forecast', 'weather');
            for ($i = 0; $i < 5; $i++) {
                $replace = array();
                $replace['#day#'] = date_fr(date('l', strtotime('+' . $i . ' days')));

                if ($i == 0) {
                    $temperature_min = $this->getCmd(null, 'temperature_min');
                } else {
                    $temperature_min = $this->getCmd(null, 'temperature_' . $i . '_min');
                }
                $replace['#low_temperature#'] = is_object($temperature_min) ? $temperature_min->execCmd() : '';

                if ($i == 0) {
                    $temperature_max = $this->getCmd(null, 'temperature_max');
                } else {
                    $temperature_max = $this->getCmd(null, 'temperature_' . $i . '_max');
                }
                $replace['#hight_temperature#'] = is_object($temperature_max) ? $temperature_max->execCmd() : '';

                if ($i == 0) {
                    $condition = $this->getCmd(null, 'condition');
                } else {
                    $condition = $this->getCmd(null, 'condition_' . $i);
                }
                $replace['#icone#'] = is_object($condition) ? self::getIconFromCondition($condition->execCmd()) : '';

                $html_forecast .= template_replace($replace, $forcast_template);
            }
        }
        $replace = array(
            '#id#' => $this->getId(),
            '#city#' => $this->getConfiguration('city_name'),
            '#collectDate#' => '',
            '#background_color#' => $this->getBackgroundColor($_version),
            '#eqLink#' => $this->getLinkToConfiguration(),
            '#forecast#' => $html_forecast,
        );
        $temperature = $this->getCmd(null, 'temperature');
        $replace['#temperature#'] = is_object($temperature) ? $temperature->execCmd() : '';

        $humidity = $this->getCmd(null, 'humidity');
        $replace['#humidity#'] = is_object($humidity) ? $humidity->execCmd() : '';

        $pressure = $this->getCmd(null, 'pressure');
        $replace['#pressure#'] = is_object($pressure) ? $pressure->execCmd() : '';

        $wind_speed = $this->getCmd(null, 'wind_speed');
        $replace['#windspeed#'] = is_object($wind_speed) ? $wind_speed->execCmd() : '';

        $sunrise = $this->getCmd(null, 'sunrise');
        $replace['#sunrise#'] = is_object($sunrise) ? $sunrise->execCmd() : '';
        if (strlen($replace['#sunrise#']) == 3) {
            $replace['#sunrise#'] = substr($replace['#sunrise#'], 0, 1) . ':' . substr($replace['#sunrise#'], 1, 2);
        } else if (strlen($replace['#sunset#']) == 4) {
            $replace['#sunrise#'] = substr($replace['#sunrise#'], 0, 2) . ':' . substr($replace['#sunrise#'], 2, 2);
        }

        $sunset = $this->getCmd(null, 'sunset');
        $replace['#sunset#'] = is_object($sunset) ? $sunset->execCmd() : '';
        if (strlen($replace['#sunset#']) == 3) {
            $replace['#sunset#'] = substr($replace['#sunset#'], 0, 1) . ':' . substr($replace['#sunset#'], 1, 2);
        } else if (strlen($replace['#sunset#']) == 4) {
            $replace['#sunset#'] = substr($replace['#sunset#'], 0, 2) . ':' . substr($replace['#sunset#'], 2, 2);
        }

        $wind_direction = $this->getCmd(null, 'wind_direction');
        $replace['#wind_direction#'] = is_object($wind_direction) ? $wind_direction->execCmd() : 0;

        $condition = $this->getCmd(null, 'condition_now');
        $sunset_time = is_object($sunset) ? $sunset->execCmd() : null;
        $sunrise_time = is_object($sunrise) ? $sunrise->execCmd() : null;
        if (is_object($condition)) {
            $replace['#icone#'] = self::getIconFromCondition($condition->execCmd(), $sunrise_time, $sunset_time);
            $replace['#condition#'] = $condition->execCmd();
            $replace['#collectDate#'] = $condition->getCollectDate();
        } else {
            $replace['#icone#'] = '';
            $replace['#condition#'] = '';
            $replace['#collectDate#'] = '';
        }

        $parameters = $this->getDisplay('parameters');
        if (is_array($parameters)) {
            foreach ($parameters as $key => $value) {
                $replace['#' . $key . '#'] = $value;
            }
        }

        $html = template_replace($replace, getTemplate('core', $_version, 'current', 'weather'));
        cache::set('weatherWidget' . $_version . $this->getId(), $html, 0);
        return $html;
    }

----
 
Plusieurs chose interessante ici : 

Pour de convertir la version demandé en dashboard ou mobile (mview devient mobile par exemple, cela permet par exemple sur les vue de rajouter le nom des objets)
----
$_version = jeedom::versionAlias($_version);
----

Ici recuperation du widget anciennement generé en cache (si celui-ci est non vide) , ca permet de gagner du temps sur la generation, attention quand meme à bien vider le cache lors de la mise à jour des données
----
    $mc = cache::byKey('weatherWidget' . $_version . $this->getId());
    if ($mc->getValue() != '') {
        return $mc->getValue();
    }
----

Recuperation d'un template de commande, ici le template de commande : plugins/weather/core/template/$_version/forecast.html ($_version valant mobile ou dashboard)
----
$forcast_template = getTemplate('core', $_version, 'forecast', 'weather');
----

Ici remplacement des tag prealablement remplis dans $replace du html pour avoir les valeurs dessus
----
$html_forecast .= template_replace($replace, $forcast_template);
----

Cela permet de recuperer la commande ayant le logical_id : temperature_min
----
$this->getCmd(null, 'temperature_min');
----

La ca permet de mettre la valeur dans le tag, seulement si la commande a bien été récuperé
----
$replace['#temperature#'] = is_object($temperature) ? $temperature->execCmd() : '';
----

Passage important, ca permet de recuperer les personalisations faite par l'utilisateur sur la page Générale -> Affichage et de les reinjecter dans le template
----
$parameters = $this->getDisplay('parameters');
if (is_array($parameters)) {
    foreach ($parameters as $key => $value) {
        $replace['#' . $key . '#'] = $value;
    }
}
----

Sauvegarde du widget dans le cache, pour que lors de la prochaine demande on le fournisse plus rapidement, on peut remarqué le 0 ici qui indique une durée de vie infinie, sinon la durée est en secondes (on verra dans la partie suivante comment le plugin weather remet à jour son widget).
----
cache::set('weatherWidget' . $_version . $this->getId(), $html, 0);
----

Enfin envoi du html à Jeedom : 
----
return $html;
----

.methode pre et post
Lors de la creation ou la supression de vos objet (equipement, commande ou autre) dans Jeedom, celui-ci peut appeler plusieurs méthodes avant/après l'action : 

- preInsert => Méthode appellé avant la création de votre objet
- postInsert =>  Méthode appellé après la création de votre objet
- preUpdate =>  Méthode appellé avant la mise à jour de votre objet
- postUpdate =>  Méthode appellé après la mise à jour de votre objet
- preSave =>  Méthode appellé avant la sauvegarde (creation et mise à jour donc) de votre objet
- postSave =>  Méthode appellé après la sauvegarde de votre objet
- preRemove =>  Méthode appellé avant la supression de votre objet
- postRemove =>  Méthode appellé après la supression de votre objet

Exemple, toujours avec le plugin weather de la creation des commandes ou mise à jour de celle-ci après la sauvegarde (l'exemple est simplifié) : 

----
 public function postUpdate() {
        $weatherCmd = $this->getCmd(null, 'temperature');
        if (!is_object($weatherCmd)) {
            $weatherCmd = new weatherCmd();
        }
        $weatherCmd->setName(__('Température', __FILE__));
        $weatherCmd->setLogicalId('temperature');
        $weatherCmd->setEqLogic_id($this->getId());
        $weatherCmd->setConfiguration('day', '-1');
        $weatherCmd->setConfiguration('data', 'temp');
        $weatherCmd->setUnite('°C');
        $weatherCmd->setType('info');
        $weatherCmd->setEventOnly(1);
        $weatherCmd->setSubType('numeric');
        $weatherCmd->save();

        $cron = cron::byClassAndFunction('weather', 'updateWeatherData', array('weather_id' => intval($this->getId())));
        if (!is_object($cron)) {
            $cron = new cron();
            $cron->setClass('weather');
            $cron->setFunction('updateWeatherData');
            $cron->setOption(array('weather_id' => intval($this->getId())));
        }
        $cron->setSchedule($this->getConfiguration('refreshCron', '*/30 * * * *'));
        $cron->save();
}
----

Le début est assez standard avec la création d'une commande, la fin est plus interessant avec la mise en place d'un cron qui va appeler la methode weather::updateWeatherData en passant l'id de l'équipement à mettre à jour toute les 30min par défaut.

Ici la methode updateWeatherData (simplifié aussi) : 
----
 public static function updateWeatherData($_options) {
    $weather = weather::byId($_options['weather_id']);
    if (is_object($weather)) {
        foreach ($weather->getCmd('info') as $cmd) {
            $value = $cmd->execute();
            if ($value != $cmd->execCmd()) {
                $cmd->setCollectDate('');
                $cmd->event($value);
            }
        }
        $mc = cache::byKey('weatherWidgetmobile' . $weather->getId());
        $mc->remove();
        $mc = cache::byKey('weatherWidgetdashboard' . $weather->getId());
        $mc->remove();
        $weather->toHtml('mobile');
        $weather->toHtml('dashboard');
        $weather->refreshWidget();
    }
}
----

On voit ici que lors de l'appel on recupere l'équipement concerné puis que l'on execute les commandes pour recuperer les valeurs et mettre à jour celle-ci si necessaire.

Partie très importante : 
----
$cmd->setCollectDate('');
$cmd->event($value);
----

La premiere ligne est très important car juste avant on à fait un execCmd qui va remplir le champs _collectDate (le _ devant le nom de l'attribut indique à Jeedom que l'attribut ne doit pas etre sauvegarder en base, donc si vous en ajoutez pour votre class pensez bien à le preceder d'un _) or au moment de la fonction event (qui permet de signaler à Jeedom une nouvelle mise à jour de la valeur, avec declenchement de toute les actions qui doivent etre faite : mise à jour du dashboard, verification des scenario...), Jeedom regarde si la date de collecte est ancien et si c'est le cas va refuser la nouvelle valeur. D'ou la remise à 0.

Ensuite on vide le cache (ici pas besoin de verifier s'il existe, l'objet est vide si le cache n'existe pas donc aucun risque pour la supression) : 
----
$mc = cache::byKey('weatherWidgetmobile' . $weather->getId());
$mc->remove();
----

Vu que le cache est vide on force la generation des widget mobile et dashboard : 
----
$weather->toHtml('mobile');
$weather->toHtml('dashboard');
----

Enfin on previent jeedom que le widget est à rafraichir sur l'interface de l'utilisateur : 
----
$weather->refreshWidget();
----

Pour la class commande, un petit truc a savoir si vous utilisez le template js de base. Lors de l'envoi de l'équipment Jeedom fait du differentiel sur les commandes et va supprimer celle qui sont en base mais pas dans la nouvelle definition de l'équipement. Voila comment l'éviter : 
----
 public function dontRemoveCmd() {
    return true;
}
----

Pour finir voici quelques trucs et astuce : 

- evité (à moins de savoir ce que vous faites) d'écraser une methode de la class herité (ca peut causer pas mal de problème)
- Pour remonter la batterie (en %) d'un équipement, faite sur celui-ci (jeedom se chargera du reste et de prevenir l'utilisateur si nécessaire) : 
----
$eqLogic->batteryStatus(56);
----

- Sur les commandes au moment de l'ajout d'une valeur jeedom applique la methode d'instance formatValue($_value) qui en fonction du sous-type peut la remettre en forme (en particulier pour les valeurs binaire)
- ne faite JAMAIS une methode dans la class heritant de cmd s'appellant : execCmd ou event
- si dans la configuration de votre commande vous avez renseigné returnStateTime (en minute) et returnStateValue, jeedom changera automatique la valeur de votre commande par returnStateValue au bout de X minute(s)
- toujours sur la commande vous pouvez utiliser addHistoryValue pour forcer la mise en historique (attention votre commande doit etre historisée)
